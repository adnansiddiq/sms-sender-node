#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config()
var app = require('../app');
var debug = require('debug')('send-sms:server');
var http = require('http');
const { Server } = require("socket.io");
const fetch = require("node-fetch");



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var global = {
  isOnline: false
}

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server);

var apiTimer = null

io.on('connection', (socket) => {
  console.log('a user connected');
  global.isOnline = true

  fetchSms()

  socket.on('sms-sent', function(data) {
    console.log("SMS_SENT", data)

    const {reference, status} = data
    const url = `https://letssolve.me/sms-webhook?reference=${reference}&status=${status}`
    console.log({url})
    
    fetch(url)
      .then(r =>  r.text())
      .then(j => console.log("wehbook response", j))
      .catch(e => console.error(e))
  });

  socket.on('alive', function(data) {
    console.log(data)
    global.isOnline = true
  })

  socket.on('disconnect', () => {
    global.isOnline = false
    clearTimeout(apiTimer)
    console.log('user disconnected');
  });
});

app.set('socketio', io)
app.set('global', global)


setInterval(() => {
  console.log("Are you Alive?")
  io.emit("alive", "Are you alive")
}, 1000*60)


function fetchSms() {
  apiTimer = setTimeout( async () => {
    try {
      console.log(new Date())
      const url = `https://letssolve.me/sms-notifications`
      console.log({url})

      const response = await fetch(url)
      const json = await response.json()

      if (json.id ?? null) {
        const {contact: to, message, id: reference} = req.body
        io.emit('send-sms', {to, message, reference})
      } else {
        console.log("NOT FOUND")
      }
      
    } catch (e) {
      console.error(e)
    } finally {
      fetchSms()
    }
    
  }, (Math.random()*10 + 10) *1000 );
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
